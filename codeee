<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>AskHR Assistant</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
      position: relative;
      overflow-x: hidden;
    }

    /* Animated background particles */
    body::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><circle cx="20" cy="20" r="2" fill="%23ffffff" opacity="0.1"><animate attributeName="opacity" values="0.1;0.3;0.1" dur="3s" repeatCount="indefinite"/></circle><circle cx="80" cy="30" r="1.5" fill="%23ffffff" opacity="0.1"><animate attributeName="opacity" values="0.1;0.4;0.1" dur="2s" repeatCount="indefinite"/></circle><circle cx="40" cy="70" r="1" fill="%23ffffff" opacity="0.1"><animate attributeName="opacity" values="0.1;0.5;0.1" dur="4s" repeatCount="indefinite"/></circle></svg>') repeat;
      pointer-events: none;
      z-index: 0;
    }

    .container {
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(20px);
      border-radius: 24px;
      box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25), 0 0 0 1px rgba(255, 255, 255, 0.2);
      width: 100%;
      max-width: 800px;
      height: 700px;
      display: flex;
      flex-direction: column;
      position: relative;
      overflow: hidden;
      z-index: 1;
    }

    /* Maruti Suzuki watermark */
    .watermark {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      opacity: 0.03;
      width: 300px;
      height: 300px;
      background: url('Watermark.png') no-repeat center;
      background-size: contain;
      pointer-events: none;
      z-index: 0;
    }

    .header {
      background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%);
      color: white;
      padding: 24px 32px;
      text-align: center;
      position: relative;
      overflow: hidden;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 16px;
    }

    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: linear-gradient(45deg, transparent, rgba(255, 255, 255, 0.1), transparent);
      transform: rotate(45deg);
      animation: shimmer 3s infinite;
    }

    @keyframes shimmer {
      0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); }
      100% { transform: translateX(100%) translateY(100%) rotate(45deg); }
    }

    .header h1 {
      font-size: 2rem;
      font-weight: 700;
      margin: 0;
      display: flex;
      align-items: center;
      gap: 8px;
      position: relative;
      z-index: 1;
    }
    /* Icon inside header */
    .header h1 img {
      width: 32px;
      height: 32px;
    }

    .header-content {
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
    }

    .logo-container {
      width: 80px;
      height: 80px;
      border-radius: 50%;
      background: white;
      border: 3px solid rgba(255, 255, 255, 0.3);
      display: flex;
      align-items: center;
      justify-content: center;
      overflow: hidden;
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }

    .logo-image {
      width: 100%;
      height: 100%;
      object-fit: contain;
      padding: 8px;
    }

    .header p {
      opacity: 0.9;
      font-size: 1rem;
      font-weight: 400;
      position: relative;
      z-index: 1;
    }

    .chat-container {
      flex: 1;
      display: flex;
      flex-direction: column;
      position: relative;
      z-index: 1;
    }

    #chatbox {
      flex: 1;
      padding: 24px;
      overflow-y: auto;
      background: transparent;
      position: relative;
    }

    #chatbox::-webkit-scrollbar {
      width: 6px;
    }

    #chatbox::-webkit-scrollbar-track {
      background: rgba(0, 0, 0, 0.05);
      border-radius: 3px;
    }

    #chatbox::-webkit-scrollbar-thumb {
      background: linear-gradient(135deg, #667eea, #764ba2);
      border-radius: 3px;
    }

    .message {
      margin-bottom: 20px;
      display: flex;
      align-items: flex-start;
      animation: messageSlide 0.3s ease-out;
    }

    @keyframes messageSlide {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .message.user {
      justify-content: flex-end;
    }

    .message-content {
      max-width: 75%;
      padding: 16px 20px;
      border-radius: 20px;
      font-size: 0.95rem;
      line-height: 1.5;
      position: relative;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .user .message-content {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border-bottom-right-radius: 6px;
      margin-left: 20px;
    }

    .bot .message-content {
      background: white;
      color: #374151;
      border: 1px solid rgba(0, 0, 0, 0.06);
      border-bottom-left-radius: 6px;
      margin-right: 20px;
    }

    .avatar {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.2rem;
      margin: 0 12px;
      flex-shrink: 0;
      overflow: hidden;
      background: white;
    }

    .avatar img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .user .avatar {
      background: linear-gradient(135deg, #667eea, #764ba2);
      color: white;
      order: 1;
    }

    .bot .avatar {
      background: transparent;
      color: white;
    }

    .input-container {
      padding: 24px 32px 32px;
      background: rgba(249, 250, 251, 0.8);
      backdrop-filter: blur(10px);
      border-top: 1px solid rgba(0, 0, 0, 0.06);
      position: relative;
      z-index: 1;
    }

    .input-wrapper {
      display: flex;
      gap: 12px;
      align-items: center;
      background: white;
      border-radius: 25px;
      padding: 6px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
      border: 1px solid rgba(0, 0, 0, 0.06);
      transition: all 0.3s ease;
    }

    .input-wrapper:focus-within {
      box-shadow: 0 8px 30px rgba(102, 126, 234, 0.15);
      border-color: #667eea;
    }

    #query {
      flex: 1;
      border: none;
      outline: none;
      padding: 16px 20px;
      font-size: 1rem;
      background: transparent;
      color: #374151;
      font-family: inherit;
    }

    #query::placeholder {
      color: #9ca3af;
    }

    #send {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      width: 48px;
      height: 48px;
      border-radius: 50%;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.1rem;
      position: relative;
      overflow: hidden;
      transition: all 0.3s ease;
      box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
    }

    #send:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(102, 126, 234, 0.4);
    }

    #send:active {
      transform: translateY(0);
    }

    #send::before {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 0;
      height: 0;
      background: rgba(255, 255, 255, 0.2);
      border-radius: 50%;
      transform: translate(-50%, -50%);
      transition: all 0.3s ease;
    }

    #send:hover::before {
      width: 100%;
      height: 100%;
    }

    .typing-indicator {
      display: none;
      align-items: center;
      gap: 4px;
      color: #6b7280;
      font-style: italic;
      margin-left: 52px;
    }

    .typing-dot {
      width: 6px;
      height: 6px;
      background: #9ca3af;
      border-radius: 50%;
      animation: typing 1.4s infinite ease-in-out;
    }

    .typing-dot:nth-child(2) { animation-delay: 0.2s; }
    .typing-dot:nth-child(3) { animation-delay: 0.4s; }

    @keyframes typing {
      0%, 60%, 100% { opacity: 0.3; transform: scale(0.8); }
      30% { opacity: 1; transform: scale(1); }
    }

    /* Welcome message */
    .welcome-message {
      text-align: center;
      color: #6b7280;
      padding: 40px 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 16px;
    }

    .welcome-icon {
      width: 80px;
      height: 80px;
      background: linear-gradient(135deg, #667eea, #764ba2);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 2rem;
      margin-bottom: 8px;
    }

    /* Responsive design */
    @media (max-width: 768px) {
      body {
        padding: 10px;
      }

      .container {
        height: 100vh;
        border-radius: 0;
        max-width: none;
      }

      .header {
        flex-direction: column;
        gap: 16px;
        padding: 20px;
      }

      .header h1 {
        font-size: 1.5rem;
      }

      .logo-container {
        width: 60px;
        height: 60px;
      }

      .input-container {
        padding: 16px 20px 20px;
      }

      .message-content {
        max-width: 85%;
      }
    }

    .error-message .message-content {
      background: linear-gradient(135deg, #ef4444, #dc2626);
      color: white;
    }
  </style>
</head>
<body>
  <!-- Watermark.png (in same folder) -->
  <div class="watermark"></div>

  <div class="container">
    <div class="header">
      <div class="logo-container">
        <!-- Logo.png (in same folder) -->
        <img src="Logo.png" alt="Logo" class="logo-image">
      </div>
      <div class="header-content">
        <h1>
          <!-- Replace car icon with bot.png (bot.png must be in same folder) -->
          <img src="bot.png" alt="Bot Icon" /> AskHR Assistant
        </h1>
        <p>Your intelligent HR Q&A companion</p>
      </div>
    </div>

    <div class="chat-container">
      <div id="chatbox">
        <div class="welcome-message">
          <div class="welcome-icon">
            <i class="fas fa-robot"></i>
          </div>
          <h3>Welcome to AskHR Assistant!</h3>
          <p>I'm here to help you with HR-related questions. Ask me anything!</p>
        </div>
      </div>

      <div class="typing-indicator" id="typingIndicator">
        <span>Assistant is typing</span>
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
        <div class="typing-dot"></div>
      </div>
    </div>

    <div class="input-container">
      <div class="input-wrapper">
        <input
          type="text"
          id="query"
          placeholder="Ask me about HR policies, leave requests, or procedures..."
          autocomplete="off"
        />
        <button id="send">
          <i class="fas fa-paper-plane"></i>
        </button>
      </div>
    </div>
  </div>

  <script>
    const chatbox = document.getElementById("chatbox");
    const queryInput = document.getElementById("query");
    const sendButton = document.getElementById("send");
    const typingIndicator = document.getElementById("typingIndicator");

    // Remove welcome message when first message is sent
    let hasMessages = false;
    function removeWelcomeMessage() {
      if (!hasMessages) {
        const welcomeMsg = document.querySelector(".welcome-message");
        if (welcomeMsg) {
          welcomeMsg.style.animation = "messageSlide 0.3s ease-out reverse";
          setTimeout(() => welcomeMsg.remove(), 300);
        }
        hasMessages = true;
      }
    }

    function appendMessage(text, isUser = false, isError = false) {
      removeWelcomeMessage();

      const messageDiv = document.createElement("div");
      messageDiv.className = `message ${isUser ? "user" : "bot"}${isError ? " error-message" : ""}`;

      // Avatar container
      const avatar = document.createElement("div");
      avatar.className = "avatar";

      if (isUser) {
        // Keep using Font Awesome icon for user
        avatar.innerHTML = '<i class="fas fa-user"></i>';
      } else {
        // Insert your bot image here (bot.png should be in same folder)
        avatar.innerHTML = '<img src="bot.png" alt="Bot">';
      }

      const content = document.createElement("div");
      content.className = "message-content";
      content.textContent = text;

      if (isUser) {
        messageDiv.appendChild(content);
        messageDiv.appendChild(avatar);
      } else {
        messageDiv.appendChild(avatar);
        messageDiv.appendChild(content);
      }

      chatbox.appendChild(messageDiv);
      chatbox.scrollTop = chatbox.scrollHeight;
    }

    function showTypingIndicator() {
      typingIndicator.style.display = "flex";
    }
    function hideTypingIndicator() {
      typingIndicator.style.display = "none";
    }

    async function sendQuestion() {
      const question = queryInput.value.trim();
      if (!question) return;

      queryInput.disabled = true;
      sendButton.disabled = true;
      sendButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>';

      appendMessage(question, true);
      queryInput.value = "";
      showTypingIndicator();

      try {
        await new Promise((resolve) => setTimeout(resolve, 500));

        const resp = await fetch("/ask", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ query: question }),
        });
        const data = await resp.json();
        hideTypingIndicator();

        if (resp.ok) {
          appendMessage(data.answer);
        } else {
          appendMessage(data.error || "Sorry, I encountered an error. Please try again.", false, true);
        }
      } catch (err) {
        hideTypingIndicator();
        appendMessage("Connection error. Please check your internet and try again.", false, true);
      } finally {
        queryInput.disabled = false;
        sendButton.disabled = false;
        sendButton.innerHTML = '<i class="fas fa-paper-plane"></i>';
        queryInput.focus();
      }
    }

    sendButton.addEventListener("click", sendQuestion);
    queryInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter" && !queryInput.disabled) {
        sendQuestion();
      }
    });

    queryInput.focus();
  </script>
</body>
</html>